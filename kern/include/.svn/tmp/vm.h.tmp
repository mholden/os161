#ifndef _VM_H_
#define _VM_H_

#include <machine/vm.h>

/*
 * VM system-related definitions.
 *
 * You'll probably want to add stuff here.
 */


/* Fault-type arguments to vm_fault() */
#define VM_FAULT_READ        0    /* A read was attempted */
#define VM_FAULT_WRITE       1    /* A write was attempted */
#define VM_FAULT_READONLY    2    /* A write to a readonly page was attempted*/

/*	variable to point if VM has been initialized->1 otherwise->0*/
extern int vm_init_flag;

/*	Page states*/
#define PAGE_FREE			0
#define PAGE_DIRTY			1
#define PAGE_CLEAN			2
#define PAGE_FIXED			3


/**/

/* Initialization function */
void vm_bootstrap(void);

/* Fault handling function called by trap code */
int vm_fault(int faulttype, vaddr_t faultaddress);

/* Allocate/free kernel heap pages (called by kmalloc/kfree) */
vaddr_t alloc_kpages(int npages);
/*
 * allocate a single page in memory
 */

paddr_t page_alloc();

paddr_t page_nalloc(int npages);
/*flush a dirty page to disk*/
void page_flush( int page_num);
void free_kpages(vaddr_t addr);

/* GET RID OF THIS */
paddr_t getppages(unsigned long npages);

#endif /* _VM_H_ */
