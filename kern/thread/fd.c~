#include <types.h>
#include <lib.h>
#include <vnode.h>
#include <fd.h>
#include <curthread.h>
#include <kern/errno.h>
#include <kern/types.h>
#include <thread.h>
#include <synch.h>
#include <pcb_list.h>
#include <vfs.h>

struct file_node *file_table[MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD];
struct lock *file_table_lock;

int init_fd(int filehandle, struct vnode *file, const char *filename, off_t offset, int flags, int opened_flag){
	struct fd *fd;
	
	assert(filehandle >= 0);
	assert(file != NULL);
	assert(filename != NULL);

	fd = kmalloc(sizeof(struct fd));
	if(fd == NULL) return ENOMEM;

	fd->file = file;
	
	fd->filename = kstrdup(filename);
	if(fd->filename == NULL){
		kfree(fd);
		return ENOMEM;	
	}

	fd->curr_offset = offset;
	fd->rw_flags = flags;
	fd->opened = kmalloc(sizeof(int));
	if(fd->opened == NULL){
		kfree(fd->filename);
		kfree(fd);
		return ENOMEM;
	}
	*(fd->opened) = opened_flag;

	curthread->file_descriptors[filehandle] = fd;

	return 0;
}

int dup_fd(int filehandle, int newhandle){
	assert(filehandle >= 0 && newhandle >= 0);
        assert(curthread->file_descriptors[filehandle] != NULL);
	assert(curthread->file_descriptors[newhandle] == NULL);

	int index, err;
	struct vnode *file;	

	curthread->file_descriptors[newhandle] = curthread->file_descriptors[filehandle];
	
	/* We weren't opened, though */
	curthread->file_descriptors[newhandle]->opened = kmalloc(sizeof(int));
	if(curthread->file_descriptors[newhandle]->opened == NULL){
                curthread->file_descriptors[newhandle] = NULL;
                return ENOMEM;
        }
	*(curthread->file_descriptors[newhandle]->opened) = 0;
	
	/* Increment reference counters */
	file = curthread->file_descriptors[newhandle]->file;
	err = find_file_index(file, &index);
	if(err){
		curthread->file_descriptors[newhandle] = NULL;
		return err;
	}
	inc_refcount(index);
	VOP_INCREF(file);

	return 0;
}

int acquire_fd(int *fd){
	int i;

	assert(fd != NULL);
 
	for(i=0; i < MAX_FILES_PER_THREAD; i++){
		if(curthread->file_descriptors[i] == NULL) break;
	}
	if(i == MAX_FILES_PER_THREAD) return ENOSPC;	

	*fd = i;
	return 0;
}

void release_fd(int filehandle){
	assert(filehandle >= 0);
	assert(curthread->file_descriptors[filehandle] != NULL);
	
	int i, last_link = 1;
	for(i = 0; i < MAX_FILES_PER_THREAD; i++){
		if(curthread->file_descriptors[i] == curthread->file_descriptors[filehandle]){
			if(i != filehandle){
				last_link = 0;
				break;
			}
		}
	}
	if(last_link){
		/* Only free these if there are no other links to this struct fd (dup2 could cause this) */
                kfree(curthread->file_descriptors[filehandle]->filename);
                kfree(curthread->file_descriptors[filehandle]);
	}
	
	/* opened is only thing not shared by dup2 file descriptors */
	kfree(curthread->file_descriptors[filehandle]->opened);
	curthread->file_descriptors[filehandle] = NULL;
	
	return;
}

/* 
 * All static functions below are used by functions that have already acquired
 * file_table_lock, so don't acquire it again 
 */

static
int find_free_index(int *index){
	int i;

	assert(index != NULL);
	
	for(i = 0; i < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD; i++) if(file_table[i] == NULL) break;

        if(i == MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD) return ENOSPC;
	
	*index = i;

	return 0;
}

static
int find_file_index(struct vnode *file, int *index){
	int i;

	assert(file != NULL);
	assert(index != NULL);

	for(i = 0; i < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD; i++){
                if(file_table[i] == NULL) continue;
                if(file_table[i]->file == file) break;
        }

        if(i == MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD) return EINVAL;

	*index = i;

	return 0;
}

static
int add_file_node(struct vnode *file, struct lock *lock, int ref_count){
	int index, err;

	assert(file != NULL);
	assert(lock != NULL);
	
	err = find_free_index(&index);
	if(err) return err;

	file_table[index] = kmalloc(sizeof(struct file_node));
	if(file_table[index] == NULL) return ENOMEM;

	file_table[index]->file = file;
	file_table[index]->lock = lock;
	file_table[index]->ref_count = ref_count;
	
	return 0;
}

static
void remove_file_node(int index){
        assert((index >= 0) && (index < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD))

        lock_destroy(file_table[index]->lock);
	kfree(file_table[index]);
	file_table[index] = NULL;

        return;
}

static
int file_node_exists(struct vnode *file, int *index){
	int i;

        assert(file != NULL);

        for(i = 0; i < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD; i++){
                if(file_table[i] == NULL) continue;
                if(file_table[i]->file == file) break;
	}

        if(i == MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD) return 0;
	else{
		*index = i; 
		return 1;
	}
}

static
void inc_refcount(int index){
	assert((index >= 0) && (index < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD));
	file_table[index]->ref_count += 1;

        return;
}

static
void dec_refcount(int index){
	assert((index >= 0) && (index < MAX_NUM_PROCESSES * MAX_FILES_PER_THREAD));
        file_table[index]->ref_count -= 1;

        return;
}

void close_file(int filehandle){
	int opened;
        struct vnode *file;

	assert(filehandle >= 0);

        file = curthread->file_descriptors[filehandle]->file;
        opened = *(curthread->file_descriptors[filehandle]->opened);

        release_fd(filehandle);
	check_to_remove_file_node(file);
        if(!opened) VOP_DECREF(file);
        else vfs_close(file);	
}

int check_to_add_file_node(struct vnode *file, const char *filename){
	char *lock_name;
	struct lock *lock;
	int ref_count, index, err;

	assert(file != NULL);
        assert(filename != NULL);

	lock_acquire(file_table_lock);

	if(file_node_exists(file, &index)){
		inc_refcount(index);
		lock_release(file_table_lock);
		return 0;
	} else{ /* file does not already exist in our file_table.. add it */
		lock_name = kmalloc(strlen(filename) + 6);
                if(lock_name == NULL){
			lock_release(file_table_lock);
			return ENOMEM;
		}
                strcpy(lock_name, filename);
                strcat(lock_name, "_lock");
                lock = lock_create(lock_name);
                kfree(lock_name);
                if(lock == NULL){
			lock_release(file_table_lock);
			return ENOMEM;
		}

                ref_count = 1;

                err = add_file_node(file, lock, ref_count);
                if(err){
                        lock_destroy(lock);
                        lock_release(file_table_lock);
			return err;
                }
	}

	lock_release(file_table_lock);

	return 0;
}

void check_to_remove_file_node(struct vnode *file){
	int ref_count, index, err;
	
	assert(file != NULL);

	lock_acquire(file_table_lock);

	err = find_file_index(file, &index);
	if(err){
		lock_release(file_table_lock);
		return;
	}

	ref_count = file_table[index]->ref_count;

	if(ref_count == 1) remove_file_node(index);
	else dec_refcount(index);

	lock_release(file_table_lock);

	return;
}

int acquire_file_lock(struct vnode *file){
	int index, err;
	struct lock *lock;

        assert(file != NULL);
	
	lock_acquire(file_table_lock);

        err = find_file_index(file, &index);
	if(err){
		lock_release(file_table_lock);
		return err;
	}

	lock = file_table[index]->lock;

	lock_release(file_table_lock);	

        lock_acquire(lock);

        return 0;	
}

void release_file_lock(struct vnode *file){
	int index, err;  
        struct lock *lock;

        assert(file != NULL);

        lock_acquire(file_table_lock);

        err = find_file_index(file, &index);
	if(err){
		lock_release(file_table_lock);
		return;
	}

        lock = file_table[index]->lock;

        lock_release(file_table_lock);

        lock_release(lock);

        return;	
}
